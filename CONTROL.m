function [Etadot] = CONTROL(t, state, gains, gyro1, gyro2, auv, params, d, loop)
% CONTROL.m
% This script implements the control logic for the Autonomous Underwater
% Vehicle (AUV). The control system is responsible for calculating the
% required control forces and moments to drive the vehicle toward desired
% orientations and positions. The script uses Proportional-Derivative (PD)
% control gains to regulate the vehicle's roll, pitch, and yaw based on the
% current state and desired Euler angles.
%
% Inputs
% - t: Current time in the simulation (unused in calculations, included for
%      ODE solver compatibility).
% - state: Current state vector of the vehicle, including position,
%          orientation, and velocities.
% - gains: Structure containing the PD control gains for the AUV's roll,
%          pitch, and yaw.
% - gyro1, gyro2: Structures containing each gyroscope's properties, including
%                 inertia.
% - auv: Structure containing the AUV's properties, such as mass and
%        inertia.
% - params: Structure containing various physical parameters of the
%           vehicle.
% - d: Structure containing desired Euler angles (phi, theta, psi).
% - loop: Structure containing loop parameters, such as cycle time.
%
% Outputs
% - Etadot: Time derivative of the generalized position vector,
%           representing the AUV's response to the control inputs.

%% VARIABLES
% Desired roll angle from control input
phi_d   = d.phi;

% Control gains for roll (Kpp: proportional, Kdp: derivative)
Kpp     = gains.Kpp;
Kdp     = gains.Kdp;

% Moments of inertia for each CMG
I1      = gyro1.I;
I2      = gyro2.I;

% Current vehicle orientation (Euler angles)
phi     = state(4);     % Roll angle
theta   = state(5);   % Pitch angle

% Current angular velocities of the vehicle
p       = state(10);  % Roll rate
q       = state(11);  % Pitch rate
r       = state(12);  % Yaw rate

% Current deflection angles (gimbal angles) and flywheel speeds for each CMG
alpha1  = state(13);    
Omega1  = state(14);    
alpha2  = state(15);    
Omega2  = state(16);

% Control loop cycle time
T       = loop.cycleT;

%% ERROR
% Calculate error in roll angle and roll rate for PD control
errphi      = phi_d - phi;  % Roll angle error
errphidot   = -(p + sin(phi) * tan(theta) * q + cos(phi) * tan(theta) * r);  % Roll rate error

%% CONTROLLER

% % MK ROLL/YAW SEQUENTIAL CONTROL
% % Equation(s) 6a-6c, 7 MK Roll/Yaw --> change to pure roll control
% if t <= lt  % Roll only phase bringing yaw plane into alignment - think I only need this for roll sims
%     erralpha    = - int_r;  
%     Kgyro       = kpp*errphi + kdp*errphidot;
%     Nc          = kpr*erralpha - kdr*r; % Will I need these Nc terms here for a roll only simulation? TBD
%     Xc          = kpu*erru - kdu*udot + Xuu*u0^2;  
% else        % Roll and yaw phase to reach desired orientation
%     erralpha    = alpha - int_r;
%     Kgyro       = kpp*errphi + kdp*errphidot;
%     Nc          = kpr*erralpha - kdr*r;
%     Xc          = kpu*erru - kdu*udot + Xuu*u0^2;
% end

% Active roll control using PD control gains
% Apply proportional and derivative control to roll angle error
if t <= T   
    Kc = Kpp * errphi + Kdp * errphidot;
end

% Desired control forces and moments (N and N-m) in each axis
% Set non-roll components to zero, as they are not part of active control here
tauC.XD = 0;    % Desired surge force   (N)
tauC.YD = 0;    % Desired sway force    (N)
tauC.ZD = 0;    % Desired heave force   (N)
tauC.KD = Kc;   % Desired roll moment   (N-m)
tauC.MD = 0;    % Desired pitch moment  (N-m)
tauC.ND = 0;    % Desired yaw moment    (N-m)

%% CMG CONTROLS
% Calculate the required gimbal and flywheel angular accelerations for each CMG

% AFT CMG (CMG #1)
% Flywheel angular acceleration (Omegadot1) to achieve the desired pitch moment
% The tan(alpha1) and I1 terms factor in the gyroscopic effects of the CMG
contpar.Omegadot1    = (cos(alpha1)*tauC.MD - sin(alpha1)*tauC.KD)/(I1);

% Gimbal angular velocity (alphadot1) for CMG #1 to achieve the desired roll moment
contpar.alphadot1 = (tauC.KD + I1 * sin(alpha1) * contpar.Omegadot1 + I1 * cos(alpha1) * Omega1 * r) / (-I1 * cos(alpha1) * Omega1);

% FWD CMG (CMG #2)
% Flywheel angular acceleration (Omegadot2) to achieve the desired pitch moment
contpar.Omegadot2    = (cos(alpha2)*tauC.MD - sin(alpha2)*tauC.KD)/(I2);

% Gimbal angular velocity (alphadot2) for CMG #2 to achieve the desired roll moment
contpar.alphadot2 = (tauC.KD + I2 * sin(alpha2) * contpar.Omegadot2 + I2 * cos(alpha2) * Omega2 * r) / (-I2 * cos(alpha2) * Omega2);

% Calculate the torques generated by each CMG based on the control parameters
[tau_cmg1, tau_cmg2] = CMG(gyro1, gyro2, contpar, state); 

% Call the REMUS function to compute the vehicle's response (Etadot)
% based on the applied control forces and CMG-generated torques
[Etadot] = REMUS(t, auv, contpar, params, state, tauC, tau_cmg1, tau_cmg2);

end